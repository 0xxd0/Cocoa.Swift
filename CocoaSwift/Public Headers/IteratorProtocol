//
//  IteratorProtocol
//  CocoaSwift
//
//  Created by 0xxd0 on 2017/1/1.
//  Copyright © 2018年 0xxd0. All rights reserved.
//

_Pragma("once")

#ifdef __OBJC__
_Pragma("clang assume_nonnull begin")

@compatibility_alias Element NSObject;

@protocol IteratorProtocol

/// The type of element traversed by the iterator.
@property (class, nonatomic, nonnull, readonly) id Element;

/// Advances to the next element and returns it, or `nil` if no next element
/// exists.
///
/// Repeatedly calling this method returns, in order, all the elements of the
/// underlying sequence. As soon as the sequence has run out of elements, all
/// subsequent calls return `nil`.
///
/// You must not call this method if any other copy of this iterator has been
/// advanced with a call to its `next()` method.
///
/// The following example shows how an iterator can be used explicitly to
/// emulate a `for`-`in` loop. First, retrieve a sequence's iterator, and
/// then call the iterator's `next()` method until it returns `nil`.
///
///     let numbers = [2, 3, 5, 7]
///     var numbersIterator = numbers.makeIterator()
///
///     while let num = numbersIterator.next() {
///         print(num)
///     }
///     // Prints "2"
///     // Prints "3"
///     // Prints "5"
///     // Prints "7"
///
/// - Returns: The next element in the underlying sequence, if a next element
///   exists; otherwise, `nil`.
- (Element * _Nullable (^)(void))next;

@end

_Pragma("clang assume_nonnull end")
#endif
